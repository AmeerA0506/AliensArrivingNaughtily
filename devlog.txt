AliensArrivingNaughtily
Nakib Abedin + Joker
Ameer Alnasser + TurtleBoi
Alif Rahman + Grippy
pd 06
---------------------
(Donâ€™t) Hang da man


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We learned how to use Scanners in order to extract inputs from separate files. We populated an arrayList with inputs directly from another file (without using the "<" command in the terminal). We used the java.io.File module. We needed a try catch statement for a case in which the file was not found.
After a screen is cleared the cursor should be moved to (1,1). This will mean that everything in the terminal is printed from the top left.
For our opening Screen, we wanted to hide the cursor in order to improve the aesthetics of the game. However, once we finished playing, we got sent back to the normal command prompt line and the cursor still did not reappear. We had to add a line at the end of our code that made the cursor reappear.
For the ASCII art with the hangman, the string interpreted every backslash as an exit statement. We had to put two backslashes in order to have the same effect. This means a the text in our code looks misaligned but it appears normal in the terminal.
We overcame issues with case sensitivity using the toUpperCase() method in the Character wrapper class.
We fixed a bug where the user was still being prompted to enter a guess even after guessing the entire phrase. This forced us to revist how break, continue, and return statements worked in the context of exiting loops and functions.

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"Exception in thread "main" java.lang.IllegalAccessError:" 
Sometimes we get this exception. This usually happens the first few times we try to execute the code after pulling it from GitHub.
This usually goes away after we try java Woo two or three times.


COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ameer's brother is a pretty good programmer!
the switch() statement is an alternative to a chain of else if statements.
char primitives store the ASCII values of the symbol they contain.
There are ways to customize the terminal (with the resources in TerminallyIll)
We think git stash takes you back to the most recent commit. This can be used as a tool to erase all the changes made locally before pulling.
The Character wrapper class has its own toUpperCase() method for characters.
A single word may constitute a phrase. This helped us tighten up our language while writing the howToPlay section.
The wait() method from TerminallyIll.java could be used to creating a loading animation.
It's possible to clear the terminal and refresh to improve the user experience 


MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We chose not to implement the leaderboard because it seems a little difficult to implement. Our idea was that we could put it in a txt file but then the leaderboard would be local and we don't think that it makes much sense to have a local leaderboard.
We chose not to change the background color in the terminal because the colors didn't look that good to us.
We chose not to add a `play again` option. 
We wanted to move everything to the center of the terminal instead of having it appear on the top left. We couldn't think of a good way to implement this so we didn't carry through with the idea.

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Always review documentation if you are uncertain about a certain aspect of a tool that you are using.
We should have planned ahead further. We were going one implementation at a time but we found that later implementations got very complicated because our earlier implemenations weren't future proof.
Make sure to leave comments for yourself in the future. Oftentimes the lack of comments hurts yourself the most.
Make better variable names. It helps you out when the code gets messy.



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================


2022-01-16
--------------------------------------------------------------
Nakib Abedin :: Came up with the ideas of a timer and a customizable word bank. Helped Woo.java implementation.
Ameer Alnasser :: Made the team flag. Wrote out the proposal. Came up with the idea of terminal decorations in the library. Helped Woo.java implementation.
Alif Rahman :: Came up with the idea of different categories. Drove Woo.java implementation.

2022-01-17
--------------------------------------------------------------
Nakib Abedin :: Created and wrote v0 of the code.
Ameer Alnasser :: Drove v1 of the code. Implemented the switch statement, which helped optimize code. Realized that ArrayList would be our best bet since Strings are not mutable while ArrayLists did not need a set size and as a result we could change the elements that we please.
Alif Rahman :: Added inputs to input. Helped drive v1.

2022-01-18
--------------------------------------------------------------
Nakib Abedin :: Drove v2 of the code. Added ANSI colors to terminal
Ameer Alnasser :: Assisted Nakib with v2.
Alif Rahman :: Created UML diagram.

2022-01-19
--------------------------------------------------------------
Nakib Abedin :: Applied more ANSI decorations to the terminal. Fixed minor bugs in v2 of the code. Finalized v3 of the game. Removed case sensitivity for single character guesses.
Ameer Alnasser :: Added the hangman diagram to appear after every guess as well as having a place in which all wrong guesses are stored. Removed case sensitivity for phrase guesses.
Alif Rahman :: Wrote the Hangman class. Drove parts of v4.

2022-01-20
--------------------------------------------------------------
Nakib Abedin :: Fixed a bug where users were still prompted to enter a guess even after they guessed the entire phrase correctly. Finished rest of v5 at home. Added Timer and a place where all the incorrect guesses are shown.
Ameer Alnasser :: Assisted Nakib with v5.
Alif Rahman :: Fixed a bug where nothing showed up after incorrect guesses. Drove part of v5 in class.

2022-01-21
--------------------------------------------------------------
Nakib Abedin :: Fixed bug where the game was unable to register correct guesses after one incorrect guess. Located a bug. Added a loading screen effect to the inital screen.
Ameer Alnasser :: Helped locate bug.
Alif Rahman :: Drove session in class --> fixed repeated guesses. 

2022-01-22
--------------------------------------------------------------
Nakib Abedin :: Drove parts of v6. Added more decorations. Added difficulty selection screen. Updated README.md and devlog.
Ameer Alnasser :: Drove parts of v6. Added more inputs. Updated flowchart.
Alif Rahman :: Drove parts of v6. Fixed minor bugs.

2022-01-23
--------------------------------------------------------------
Nakib Abedin :: Updated devlog and README.md. Also put the finishing touches on the code and added more comments to make the code more readable.
Ameer Alnasser :: Updated flowchart and added more inputs to the file.
Alif Rahman :: Updated UML diagram to comply with all of our recent developments and added more inputs to the file.
==============================================================
